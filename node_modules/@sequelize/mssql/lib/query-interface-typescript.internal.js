"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_typescript_internal_exports = {};
__export(query_interface_typescript_internal_exports, {
  MsSqlQueryInterfaceTypescript: () => MsSqlQueryInterfaceTypescript
});
module.exports = __toCommonJS(query_interface_typescript_internal_exports);
var import_core = require("@sequelize/core");
var import_query_generator_typescript = require("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js");
var import_check = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js");
var import_symbols = require("./_internal/symbols.js");
var import_query_interface_internal = require("./query-interface.internal.js");
class MsSqlQueryInterfaceTypescript extends import_core.AbstractQueryInterface {
  #internalQueryInterface;
  constructor(dialect, internalQueryInterface) {
    internalQueryInterface ??= new import_query_interface_internal.MsSqlQueryInterfaceInternal(dialect);
    super(dialect, internalQueryInterface);
    this.#internalQueryInterface = internalQueryInterface;
  }
  async _commitTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_core.Transaction)) {
      throw new Error("Unable to commit a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection[import_symbols.ASYNC_QUEUE].enqueue(
      async () => new Promise((resolve, reject) => {
        connection.commitTransaction((error) => error ? reject(error) : resolve());
      })
    );
  }
  async _createSavepoint(transaction, options) {
    if (!transaction || !(transaction instanceof import_core.Transaction)) {
      throw new Error("Unable to create a savepoint without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection[import_symbols.ASYNC_QUEUE].enqueue(
      async () => new Promise((resolve, reject) => {
        connection.saveTransaction(
          (error) => error ? reject(error) : resolve(),
          options.savepointName
        );
      })
    );
  }
  async _rollbackSavepoint(transaction, options) {
    if (!transaction || !(transaction instanceof import_core.Transaction)) {
      throw new Error("Unable to rollback a savepoint without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection[import_symbols.ASYNC_QUEUE].enqueue(
      async () => new Promise((resolve, reject) => {
        connection.rollbackTransaction(
          (error) => error ? reject(error) : resolve(),
          options.savepointName
        );
      })
    );
  }
  async _rollbackTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_core.Transaction)) {
      throw new Error("Unable to rollback a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection[import_symbols.ASYNC_QUEUE].enqueue(
      async () => new Promise((resolve, reject) => {
        connection.rollbackTransaction((error) => error ? reject(error) : resolve());
      })
    );
  }
  async _startTransaction(transaction, options) {
    if (!transaction || !(transaction instanceof import_core.Transaction)) {
      throw new Error("Unable to start a transaction without the transaction object.");
    }
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "startTransactionQuery",
        this.sequelize.dialect,
        import_query_generator_typescript.START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,
        this.sequelize.dialect.supports.startTransaction,
        options
      );
    }
    const connection = transaction.getConnection();
    await connection[import_symbols.ASYNC_QUEUE].enqueue(
      async () => new Promise((resolve, reject) => {
        connection.beginTransaction(
          (error) => error ? reject(error) : resolve(),
          options.transactionName,
          this.#internalQueryInterface.parseIsolationLevel(options.isolationLevel)
        );
      })
    );
  }
}
//# sourceMappingURL=query-interface-typescript.internal.js.map
