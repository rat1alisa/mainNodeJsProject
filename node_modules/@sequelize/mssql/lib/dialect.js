"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dialect_exports = {};
__export(dialect_exports, {
  MsSqlDialect: () => MsSqlDialect,
  TDS_VERSION: () => import_tedious.TDS_VERSION,
  TEDIOUS_ISOLATION_LEVEL: () => import_tedious.ISOLATION_LEVEL
});
module.exports = __toCommonJS(dialect_exports);
var import_core = require("@sequelize/core");
var import_connection_options = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js");
var import_sql = require("@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js");
var import_utils = require("@sequelize/utils");
var import_connection_options2 = require("./_internal/connection-options.js");
var import_data_types_db = require("./_internal/data-types-db.js");
var DataTypes = __toESM(require("./_internal/data-types-overrides.js"));
var import_connection_manager = require("./connection-manager.js");
var import_query_generator = require("./query-generator.js");
var import_query_interface = require("./query-interface.js");
var import_query = require("./query.js");
var import_tedious = require("tedious");
const DIALECT_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  tediousModule: void 0
});
class MsSqlDialect extends import_core.AbstractDialect {
  static supports = import_core.AbstractDialect.extendSupport({
    "DEFAULT VALUES": true,
    "LIMIT ON UPDATE": true,
    migrations: false,
    returnValues: "output",
    schemas: true,
    multiDatabases: true,
    autoIncrement: {
      identityInsert: true,
      defaultValue: false,
      update: false
    },
    alterColumn: {
      unique: false
    },
    constraints: {
      restrict: false,
      default: true,
      removeOptions: { ifExists: true }
    },
    index: {
      collate: false,
      type: true,
      using: false,
      where: true,
      include: true
    },
    tmpTableTrigger: true,
    dataTypes: {
      JSON: true,
      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geography/spatial-types-geography?view=sql-server-ver16
      GEOGRAPHY: false,
      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geometry/spatial-types-geometry-transact-sql?view=sql-server-ver16
      GEOMETRY: false
    },
    uuidV4Generation: true,
    jsonOperations: true,
    jsonExtraction: {
      unquoted: true,
      quoted: false
    },
    tableHints: true,
    removeColumn: {
      ifExists: true
    },
    renameTable: {
      changeSchemaAndTable: false
    },
    createSchema: {
      authorization: true
    },
    connectionTransactionMethods: true,
    settingIsolationLevelDuringTransaction: false,
    startTransaction: {
      useBegin: true
    },
    delete: {
      limit: false
    }
  });
  connectionManager;
  queryGenerator;
  queryInterface;
  Query = import_query.MsSqlQuery;
  constructor(sequelize, options) {
    super({
      name: "mssql",
      sequelize,
      dataTypeOverrides: DataTypes,
      identifierDelimiter: {
        start: "[",
        end: "]"
      },
      options,
      dataTypesDocumentationUrl: "https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx",
      // SQL Server 2017 Express (version 14), minimum supported version, all the way
      // up to the most recent version. When increasing this version, remember to
      // update also the minimum version in the documentation at
      //   https://github.com/sequelize/website/blob/main/docs/other-topics/dialect-specific-things.md
      // and set the relevant years for the mssql Docker images in the ci.yml file at
      //   .github/workflows/ci.yml
      minimumDatabaseVersion: "14.0.1000"
    });
    this.connectionManager = new import_connection_manager.MsSqlConnectionManager(this);
    this.queryGenerator = new import_query_generator.MsSqlQueryGenerator(this);
    this.queryInterface = new import_query_interface.MsSqlQueryInterface(this);
    (0, import_data_types_db.registerMsSqlDbDataTypeParsers)(this);
  }
  createBindCollector() {
    return (0, import_sql.createNamedParamBindCollector)("@");
  }
  escapeBuffer(buffer) {
    const hex = buffer.toString("hex");
    return `0x${hex}`;
  }
  escapeString(value) {
    value = value.replaceAll("'", "''");
    return `N'${value}'`;
  }
  getDefaultSchema() {
    return "dbo";
  }
  parseConnectionUrl(url) {
    const urlObject = new URL(url);
    const options = (0, import_connection_options.parseCommonConnectionUrlOptions)({
      allowedProtocols: ["sqlserver"],
      url: urlObject,
      hostname: "server",
      port: "port",
      pathname: "database",
      stringSearchParams: import_connection_options2.STRING_CONNECTION_OPTION_NAMES,
      booleanSearchParams: import_connection_options2.BOOLEAN_CONNECTION_OPTION_NAMES,
      numberSearchParams: import_connection_options2.NUMBER_CONNECTION_OPTION_NAMES
    });
    if (urlObject.username || urlObject.password) {
      options.authentication = {
        type: "default",
        options: {}
      };
      if (urlObject.username) {
        options.authentication.options.userName = decodeURIComponent(urlObject.username);
      }
      if (urlObject.password) {
        options.authentication.options.password = decodeURIComponent(urlObject.password);
      }
    }
    return options;
  }
  static getSupportedOptions() {
    return DIALECT_OPTION_NAMES;
  }
  static getSupportedConnectionOptions() {
    return import_connection_options2.CONNECTION_OPTION_NAMES;
  }
}
//# sourceMappingURL=dialect.js.map
