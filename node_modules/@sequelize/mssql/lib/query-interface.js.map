{
  "version": 3,
  "sources": ["../src/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { Op, QueryTypes } from '@sequelize/core';\nimport { isWhereEmpty } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/query-builder-utils.js';\nimport { assertNoReservedBind } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport intersection from 'lodash/intersection';\nimport { MsSqlQueryInterfaceTypescript } from './query-interface-typescript.internal.js';\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nexport class MsSqlQueryInterface extends MsSqlQueryInterfaceTypescript {\n  /**\n   * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    const allConstraints = await this.showConstraints(tableName, { ...options, columnName });\n    const constraints = allConstraints.filter(constraint =>\n      ['DEFAULT', 'FOREIGN KEY', 'PRIMARY KEY'].includes(constraint.constraintType),\n    );\n    await Promise.all(\n      constraints.map(constraint =>\n        this.removeConstraint(tableName, constraint.constraintName, options),\n      ),\n    );\n\n    await super.removeColumn(tableName, columnName, options);\n  }\n\n  /**\n   * @override\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    // If more than 1,000 rows are inserted outside of a transaction, we can't guarantee safe rollbacks.\n    // See https://github.com/sequelize/sequelize/issues/15426\n    if (records.length > 1000 && !options.transaction) {\n      throw new Error(\n        `MSSQL doesn't allow for inserting more than 1,000 rows at a time, so Sequelize executes the insert as multiple queries. Please run this in a transaction to ensure safe rollbacks`,\n      );\n    }\n\n    return super.bulkInsert(tableName, records, options, attributes);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    const uniqueColumnNames = Object.values(model.getIndexes())\n      .filter(c => c.unique && c.fields.length > 0)\n      .map(c => c.fields);\n\n    const attributes = Object.keys(insertValues);\n    for (const index of uniqueColumnNames) {\n      if (intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(\n      tableName,\n      insertValues,\n      updateValues,\n      where,\n      model,\n      options,\n    );\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw, and queryRaw will throw if we use the option\n    delete options.replacements;\n\n    return await this.sequelize.queryRaw(sql, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAA+B;AAC/B,iCAA6B;AAC7B,iBAAqC;AACrC,0BAAyB;AACzB,iDAA8C;AAKvC,MAAM,4BAA4B,yEAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrE,MAAM,aAAa,WAAW,YAAY,SAAS;AACjD,UAAM,iBAAiB,MAAM,KAAK,gBAAgB,WAAW,EAAE,GAAG,SAAS,WAAW,CAAC;AACvF,UAAM,cAAc,eAAe;AAAA,MAAO,gBACxC,CAAC,WAAW,eAAe,aAAa,EAAE,SAAS,WAAW,cAAc;AAAA,IAC9E;AACA,UAAM,QAAQ;AAAA,MACZ,YAAY;AAAA,QAAI,gBACd,KAAK,iBAAiB,WAAW,WAAW,gBAAgB,OAAO;AAAA,MACrE;AAAA,IACF;AAEA,UAAM,MAAM,aAAa,WAAW,YAAY,OAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,WAAW,SAAS,SAAS,YAAY;AAGxD,QAAI,QAAQ,SAAS,OAAQ,CAAC,QAAQ,aAAa;AACjD,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO,MAAM,WAAW,WAAW,SAAS,SAAS,UAAU;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,UAAM,QAAQ,QAAQ;AACtB,UAAM,SAAS,CAAC;AAEhB,cAAU,EAAE,GAAG,QAAQ;AAEvB,QAAI,KAAC,yCAAa,KAAK,GAAG;AACxB,aAAO,KAAK,KAAK;AAAA,IACnB;AAGA,UAAM,oBAAoB,OAAO,OAAO,MAAM,WAAW,CAAC,EACvD,OAAO,OAAK,EAAE,UAAU,EAAE,OAAO,SAAS,CAAC,EAC3C,IAAI,OAAK,EAAE,MAAM;AAEpB,UAAM,aAAa,OAAO,KAAK,YAAY;AAC3C,eAAW,SAAS,mBAAmB;AACrC,cAAI,oBAAAA,SAAa,YAAY,KAAK,EAAE,WAAW,MAAM,QAAQ;AAC3D,gBAAQ,CAAC;AACT,mBAAW,SAAS,OAAO;AACzB,gBAAM,KAAK,IAAI,aAAa,KAAK;AAAA,QACnC;AAEA,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF;AAEA,YAAQ,EAAE,CAAC,eAAG,EAAE,GAAG,OAAO;AAE1B,YAAQ,OAAO,uBAAW;AAC1B,YAAQ,MAAM;AAEd,UAAM,MAAM,KAAK,eAAe;AAAA,MAC9B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGA,WAAO,QAAQ;AAEf,WAAO,MAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EACnD;AACF;",
  "names": ["intersection"]
}
