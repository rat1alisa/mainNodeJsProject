{
  "version": 3,
  "sources": ["../../src/_internal/async-queue.test.ts"],
  "sourcesContent": ["import { ConnectionError } from '@sequelize/core';\nimport { assert, expect } from 'chai';\nimport sinon from 'sinon';\nimport { AsyncQueueError } from '../async-queue-error';\nimport { AsyncQueue } from './async-queue';\n\nconst asyncFunction = async () => 'test';\n\ndescribe('AsyncQueue', () => {\n  let queue: AsyncQueue;\n\n  beforeEach(() => {\n    queue = new AsyncQueue();\n  });\n\n  it('should initialize correctly', () => {\n    assert(queue instanceof AsyncQueue);\n    expect(queue.closed).to.be.false;\n  });\n\n  it('should close correctly', () => {\n    queue.close();\n    expect(queue.closed).to.be.true;\n  });\n\n  it('should enqueue and execute function correctly', async () => {\n    const mockAsyncFunction = sinon.stub().resolves('test');\n    const result = await queue.enqueue(mockAsyncFunction);\n    expect(result).to.equal('test');\n    expect(mockAsyncFunction.calledOnce).to.be.true;\n  });\n\n  it('should reject if closed before execution', async () => {\n    queue.close();\n    try {\n      await queue.enqueue(asyncFunction);\n    } catch (error) {\n      assert(error instanceof ConnectionError);\n      expect(error.cause).to.be.instanceOf(\n        AsyncQueueError,\n        'the connection was closed before this query could be executed',\n      );\n    }\n  });\n\n  it('should reject if closed during execution', async () => {\n    const promise = queue.enqueue(asyncFunction);\n    queue.close();\n    try {\n      await promise;\n    } catch (error) {\n      assert(error instanceof ConnectionError);\n      expect(error.cause).to.be.instanceOf(\n        AsyncQueueError,\n        'the connection was closed before this query could finish executing',\n      );\n    }\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAAgC;AAChC,kBAA+B;AAC/B,mBAAkB;AAClB,+BAAgC;AAChC,yBAA2B;AAE3B,MAAM,gBAAgB,YAAY;AAElC,SAAS,cAAc,MAAM;AAC3B,MAAI;AAEJ,aAAW,MAAM;AACf,YAAQ,IAAI,8BAAW;AAAA,EACzB,CAAC;AAED,KAAG,+BAA+B,MAAM;AACtC,4BAAO,iBAAiB,6BAAU;AAClC,4BAAO,MAAM,MAAM,EAAE,GAAG,GAAG;AAAA,EAC7B,CAAC;AAED,KAAG,0BAA0B,MAAM;AACjC,UAAM,MAAM;AACZ,4BAAO,MAAM,MAAM,EAAE,GAAG,GAAG;AAAA,EAC7B,CAAC;AAED,KAAG,iDAAiD,YAAY;AAC9D,UAAM,oBAAoB,aAAAA,QAAM,KAAK,EAAE,SAAS,MAAM;AACtD,UAAM,SAAS,MAAM,MAAM,QAAQ,iBAAiB;AACpD,4BAAO,MAAM,EAAE,GAAG,MAAM,MAAM;AAC9B,4BAAO,kBAAkB,UAAU,EAAE,GAAG,GAAG;AAAA,EAC7C,CAAC;AAED,KAAG,4CAA4C,YAAY;AACzD,UAAM,MAAM;AACZ,QAAI;AACF,YAAM,MAAM,QAAQ,aAAa;AAAA,IACnC,SAAS,OAAP;AACA,8BAAO,iBAAiB,2BAAe;AACvC,8BAAO,MAAM,KAAK,EAAE,GAAG,GAAG;AAAA,QACxB;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,KAAG,4CAA4C,YAAY;AACzD,UAAM,UAAU,MAAM,QAAQ,aAAa;AAC3C,UAAM,MAAM;AACZ,QAAI;AACF,YAAM;AAAA,IACR,SAAS,OAAP;AACA,8BAAO,iBAAiB,2BAAe;AACvC,8BAAO,MAAM,KAAK,EAAE,GAAG,GAAG;AAAA,QACxB;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": ["sinon"]
}
