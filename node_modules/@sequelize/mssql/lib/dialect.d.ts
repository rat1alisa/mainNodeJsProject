/// <reference types="node" />
/// <reference types="node" />
import type { Sequelize } from '@sequelize/core';
import { AbstractDialect } from '@sequelize/core';
import type { MsSqlConnectionOptions, TediousModule } from './connection-manager.js';
import { MsSqlConnectionManager } from './connection-manager.js';
import { MsSqlQueryGenerator } from './query-generator.js';
import { MsSqlQueryInterface } from './query-interface.js';
import { MsSqlQuery } from './query.js';
export { TDS_VERSION, ISOLATION_LEVEL as TEDIOUS_ISOLATION_LEVEL } from 'tedious';
export interface MsSqlDialectOptions {
    /**
     * The tedious library to use.
     * If not provided, the tedious npm library will be used.
     * Must be compatible with the tedious npm library API.
     *
     * Using this option should only be considered as a last resort,
     * as the Sequelize team cannot guarantee its compatibility.
     */
    tediousModule?: TediousModule;
}
export declare class MsSqlDialect extends AbstractDialect<MsSqlDialectOptions, MsSqlConnectionOptions> {
    static supports: import("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js").DialectSupports;
    readonly connectionManager: MsSqlConnectionManager;
    readonly queryGenerator: MsSqlQueryGenerator;
    readonly queryInterface: MsSqlQueryInterface;
    readonly Query: typeof MsSqlQuery;
    constructor(sequelize: Sequelize, options: MsSqlDialectOptions);
    createBindCollector(): import("@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js").BindCollector;
    escapeBuffer(buffer: Buffer): string;
    escapeString(value: string): string;
    getDefaultSchema(): string;
    parseConnectionUrl(url: string): MsSqlConnectionOptions;
    static getSupportedOptions(): readonly "tediousModule"[];
    static getSupportedConnectionOptions(): readonly ("port" | "encrypt" | "language" | "server" | "localAddress" | "lowerCaseGuids" | "tdsVersion" | "abortTransactionOnError" | "appName" | "cancelTimeout" | "connectionRetryInterval" | "connector" | "connectTimeout" | "connectionIsolationLevel" | "cryptoCredentialsDetails" | "database" | "datefirst" | "dateFormat" | "debug" | "enableAnsiNull" | "enableAnsiPadding" | "enableAnsiWarnings" | "enableArithAbort" | "enableConcatNullYieldsNull" | "enableCursorCloseOnCommit" | "enableImplicitTransactions" | "enableNumericRoundabort" | "fallbackToDefaultDb" | "instanceName" | "maxRetriesOnTransientErrors" | "multiSubnetFailover" | "packetSize" | "readOnlyIntent" | "requestTimeout" | "rowCollectionOnDone" | "rowCollectionOnRequestCompletion" | "serverName" | "textsize" | "trustServerCertificate" | "workstationId" | "authentication")[];
}
