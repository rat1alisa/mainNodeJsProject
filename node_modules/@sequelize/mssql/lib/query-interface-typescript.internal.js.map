{
  "version": 3,
  "sources": ["../src/query-interface-typescript.internal.ts"],
  "sourcesContent": ["import type {\n  CommitTransactionOptions,\n  CreateSavepointOptions,\n  RollbackSavepointOptions,\n  RollbackTransactionOptions,\n  StartTransactionOptions,\n} from '@sequelize/core';\nimport { AbstractQueryInterface, Transaction } from '@sequelize/core';\nimport { START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/query-generator-typescript.js';\nimport { rejectInvalidOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { ASYNC_QUEUE } from './_internal/symbols.js';\nimport type { MsSqlConnection } from './connection-manager.js';\nimport type { MsSqlDialect } from './dialect.js';\nimport { MsSqlQueryInterfaceInternal } from './query-interface.internal.js';\n\nexport class MsSqlQueryInterfaceTypescript<\n  Dialect extends MsSqlDialect = MsSqlDialect,\n> extends AbstractQueryInterface<Dialect> {\n  readonly #internalQueryInterface: MsSqlQueryInterfaceInternal;\n\n  constructor(dialect: Dialect, internalQueryInterface?: MsSqlQueryInterfaceInternal) {\n    internalQueryInterface ??= new MsSqlQueryInterfaceInternal(dialect);\n\n    super(dialect, internalQueryInterface);\n    this.#internalQueryInterface = internalQueryInterface;\n  }\n\n  async _commitTransaction(\n    transaction: Transaction,\n    _options: CommitTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as MsSqlConnection;\n    await connection[ASYNC_QUEUE].enqueue(\n      async () =>\n        new Promise<void>((resolve, reject) => {\n          connection.commitTransaction(error => (error ? reject(error) : resolve()));\n        }),\n    );\n  }\n\n  async _createSavepoint(transaction: Transaction, options: CreateSavepointOptions): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to create a savepoint without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as MsSqlConnection;\n    await connection[ASYNC_QUEUE].enqueue(\n      async () =>\n        new Promise<void>((resolve, reject) => {\n          connection.saveTransaction(\n            error => (error ? reject(error) : resolve()),\n            options.savepointName,\n          );\n        }),\n    );\n  }\n\n  async _rollbackSavepoint(\n    transaction: Transaction,\n    options: RollbackSavepointOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a savepoint without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as MsSqlConnection;\n    await connection[ASYNC_QUEUE].enqueue(\n      async () =>\n        new Promise<void>((resolve, reject) => {\n          connection.rollbackTransaction(\n            error => (error ? reject(error) : resolve()),\n            options.savepointName,\n          );\n        }),\n    );\n  }\n\n  async _rollbackTransaction(\n    transaction: Transaction,\n    _options: RollbackTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as MsSqlConnection;\n    await connection[ASYNC_QUEUE].enqueue(\n      async () =>\n        new Promise<void>((resolve, reject) => {\n          connection.rollbackTransaction(error => (error ? reject(error) : resolve()));\n        }),\n    );\n  }\n\n  async _startTransaction(\n    transaction: Transaction,\n    options: StartTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without the transaction object.');\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'startTransactionQuery',\n        this.sequelize.dialect,\n        START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n        this.sequelize.dialect.supports.startTransaction,\n        options,\n      );\n    }\n\n    const connection = transaction.getConnection() as MsSqlConnection;\n    await connection[ASYNC_QUEUE].enqueue(\n      async () =>\n        new Promise<void>((resolve, reject) => {\n          connection.beginTransaction(\n            error => (error ? reject(error) : resolve()),\n            options.transactionName,\n            this.#internalQueryInterface.parseIsolationLevel(options.isolationLevel),\n          );\n        }),\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,kBAAoD;AACpD,wCAA4D;AAC5D,mBAAqC;AACrC,qBAA4B;AAG5B,sCAA4C;AAErC,MAAM,sCAEH,mCAAgC;AAAA,EAC/B;AAAA,EAET,YAAY,SAAkB,wBAAsD;AAClF,+BAA2B,IAAI,4DAA4B,OAAO;AAElE,UAAM,SAAS,sBAAsB;AACrC,SAAK,0BAA0B;AAAA,EACjC;AAAA,EAEA,MAAM,mBACJ,aACA,UACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,0BAAc;AACzD,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AAEA,UAAM,aAAa,YAAY,cAAc;AAC7C,UAAM,WAAW,0BAAW,EAAE;AAAA,MAC5B,YACE,IAAI,QAAc,CAAC,SAAS,WAAW;AACrC,mBAAW,kBAAkB,WAAU,QAAQ,OAAO,KAAK,IAAI,QAAQ,CAAE;AAAA,MAC3E,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,aAA0B,SAAgD;AAC/F,QAAI,CAAC,eAAe,EAAE,uBAAuB,0BAAc;AACzD,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAChF;AAEA,UAAM,aAAa,YAAY,cAAc;AAC7C,UAAM,WAAW,0BAAW,EAAE;AAAA,MAC5B,YACE,IAAI,QAAc,CAAC,SAAS,WAAW;AACrC,mBAAW;AAAA,UACT,WAAU,QAAQ,OAAO,KAAK,IAAI,QAAQ;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAM,mBACJ,aACA,SACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,0BAAc;AACzD,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AAEA,UAAM,aAAa,YAAY,cAAc;AAC7C,UAAM,WAAW,0BAAW,EAAE;AAAA,MAC5B,YACE,IAAI,QAAc,CAAC,SAAS,WAAW;AACrC,mBAAW;AAAA,UACT,WAAU,QAAQ,OAAO,KAAK,IAAI,QAAQ;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAM,qBACJ,aACA,UACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,0BAAc;AACzD,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACpF;AAEA,UAAM,aAAa,YAAY,cAAc;AAC7C,UAAM,WAAW,0BAAW,EAAE;AAAA,MAC5B,YACE,IAAI,QAAc,CAAC,SAAS,WAAW;AACrC,mBAAW,oBAAoB,WAAU,QAAQ,OAAO,KAAK,IAAI,QAAQ,CAAE;AAAA,MAC7E,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,MAAM,kBACJ,aACA,SACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,0BAAc;AACzD,YAAM,IAAI,MAAM,+DAA+D;AAAA,IACjF;AAEA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,UAAU;AAAA,QACf;AAAA,QACA,KAAK,UAAU,QAAQ,SAAS;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAEA,UAAM,aAAa,YAAY,cAAc;AAC7C,UAAM,WAAW,0BAAW,EAAE;AAAA,MAC5B,YACE,IAAI,QAAc,CAAC,SAAS,WAAW;AACrC,mBAAW;AAAA,UACT,WAAU,QAAQ,OAAO,KAAK,IAAI,QAAQ;AAAA,UAC1C,QAAQ;AAAA,UACR,KAAK,wBAAwB,oBAAoB,QAAQ,cAAc;AAAA,QACzE;AAAA,MACF,CAAC;AAAA,IACL;AAAA,EACF;AACF;",
  "names": []
}
