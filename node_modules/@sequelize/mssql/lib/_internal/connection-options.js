"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var connection_options_exports = {};
__export(connection_options_exports, {
  BOOLEAN_CONNECTION_OPTION_NAMES: () => BOOLEAN_CONNECTION_OPTION_NAMES,
  CONNECTION_OPTION_NAMES: () => CONNECTION_OPTION_NAMES,
  INLINED_OPTION_NAMES: () => INLINED_OPTION_NAMES,
  INLINED_OPTION_OBJ: () => INLINED_OPTION_OBJ,
  NUMBER_CONNECTION_OPTION_NAMES: () => NUMBER_CONNECTION_OPTION_NAMES,
  STRING_CONNECTION_OPTION_NAMES: () => STRING_CONNECTION_OPTION_NAMES
});
module.exports = __toCommonJS(connection_options_exports);
var import_utils = require("@sequelize/utils");
const INLINED_OPTION_OBJ = {
  abortTransactionOnError: void 0,
  appName: void 0,
  cancelTimeout: void 0,
  connectTimeout: void 0,
  connectionIsolationLevel: void 0,
  connectionRetryInterval: void 0,
  connector: void 0,
  cryptoCredentialsDetails: void 0,
  database: void 0,
  dateFormat: void 0,
  datefirst: void 0,
  debug: void 0,
  enableAnsiNull: void 0,
  enableAnsiPadding: void 0,
  enableAnsiWarnings: void 0,
  enableArithAbort: void 0,
  enableConcatNullYieldsNull: void 0,
  enableCursorCloseOnCommit: void 0,
  enableImplicitTransactions: void 0,
  enableNumericRoundabort: void 0,
  encrypt: void 0,
  fallbackToDefaultDb: void 0,
  instanceName: void 0,
  language: void 0,
  localAddress: void 0,
  lowerCaseGuids: void 0,
  maxRetriesOnTransientErrors: void 0,
  multiSubnetFailover: void 0,
  packetSize: void 0,
  port: void 0,
  readOnlyIntent: void 0,
  requestTimeout: void 0,
  rowCollectionOnDone: void 0,
  rowCollectionOnRequestCompletion: void 0,
  serverName: void 0,
  tdsVersion: void 0,
  textsize: void 0,
  trustServerCertificate: void 0,
  workstationId: void 0
};
const INLINED_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)(INLINED_OPTION_OBJ);
const CONNECTION_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  ...INLINED_OPTION_OBJ,
  authentication: void 0,
  server: void 0
});
const STRING_CONNECTION_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  appName: void 0,
  database: void 0,
  dateFormat: void 0,
  encrypt: void 0,
  instanceName: void 0,
  language: void 0,
  localAddress: void 0,
  server: void 0,
  serverName: void 0,
  tdsVersion: void 0,
  workstationId: void 0
});
const BOOLEAN_CONNECTION_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  abortTransactionOnError: void 0,
  enableAnsiNull: void 0,
  enableAnsiPadding: void 0,
  enableAnsiWarnings: void 0,
  enableArithAbort: void 0,
  enableConcatNullYieldsNull: void 0,
  enableCursorCloseOnCommit: void 0,
  enableImplicitTransactions: void 0,
  enableNumericRoundabort: void 0,
  encrypt: void 0,
  fallbackToDefaultDb: void 0,
  lowerCaseGuids: void 0,
  multiSubnetFailover: void 0,
  readOnlyIntent: void 0,
  rowCollectionOnDone: void 0,
  rowCollectionOnRequestCompletion: void 0,
  trustServerCertificate: void 0
});
const NUMBER_CONNECTION_OPTION_NAMES = (0, import_utils.getSynchronizedTypeKeys)({
  cancelTimeout: void 0,
  connectionRetryInterval: void 0,
  connectTimeout: void 0,
  connectionIsolationLevel: void 0,
  datefirst: void 0,
  maxRetriesOnTransientErrors: void 0,
  packetSize: void 0,
  port: void 0,
  requestTimeout: void 0,
  textsize: void 0
});
//# sourceMappingURL=connection-options.js.map
