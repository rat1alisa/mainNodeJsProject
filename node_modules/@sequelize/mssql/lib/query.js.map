{
  "version": 3,
  "sources": ["../src/query.js"],
  "sourcesContent": ["'use strict';\n\nimport {\n  AbstractQuery,\n  AggregateError,\n  DatabaseError,\n  EmptyResultError,\n  ForeignKeyConstraintError,\n  UniqueConstraintError,\n  UnknownConstraintError,\n  ValidationErrorItem,\n} from '@sequelize/core';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport forOwn from 'lodash/forOwn';\nimport zipObject from 'lodash/zipObject';\nimport { Request, TYPES } from 'tedious';\nimport { ASYNC_QUEUE } from './_internal/symbols.js';\n\nconst debug = logger.debugContext('sql:mssql');\n\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) {\n    return 0;\n  }\n\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) {\n    e *= 10;\n  }\n\n  return Math.log10(e);\n}\n\nexport class MsSqlQuery extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2_147_483_648 && value <= 2_147_483_647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        // Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'bigint') {\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\n        paramType.type = TYPES.VarChar;\n        paramType.value = value.toString();\n      } else {\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      const rows = [];\n      const request = new Request(sql, (err, rowCount) => {\n        err ? reject(err) : resolve([rows, rowCount]);\n      });\n\n      if (parameters) {\n        if (Array.isArray(parameters)) {\n          // eslint-disable-next-line unicorn/no-for-loop\n          for (let i = 0; i < parameters.length; i++) {\n            const paramType = this.getSQLTypeFromJsType(parameters[i], TYPES);\n            request.addParameter(\n              String(i + 1),\n              paramType.type,\n              paramType.value,\n              paramType.typeOptions,\n            );\n          }\n        } else {\n          forOwn(parameters, (parameter, parameterName) => {\n            const paramType = this.getSQLTypeFromJsType(parameter, TYPES);\n            request.addParameter(\n              parameterName,\n              paramType.type,\n              paramType.value,\n              paramType.typeOptions,\n            );\n          });\n        }\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows;\n    let rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (error) {\n      error.sql = sql;\n      error.parameters = parameters;\n\n      throw this.formatError(error);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      const dialect = this.sequelize.dialect;\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const parser = dialect.getParserForDatabaseDataType(column.metadata.type.type);\n          let value = column.value;\n\n          if (value != null && parser) {\n            value = parser(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    return this.connection[ASYNC_QUEUE].enqueue(() => this._run(this.connection, sql, parameters));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && data.length === 0) {\n          throw new EmptyResultError();\n        }\n\n        // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n        // return the current instance and mark it as an \"not an insert\".\n        if (this.isUpsertQuery() && data.length === 0) {\n          return [this.instance || data, false];\n        }\n\n        if (Array.isArray(data) && data[0]) {\n          for (const attributeOrColumnName of Object.keys(data[0])) {\n            const modelDefinition = this.model.modelDefinition;\n            const attribute = modelDefinition.columns.get(attributeOrColumnName);\n            const updatedValue = this._parseDatabaseValue(\n              data[0][attributeOrColumnName],\n              attribute?.type,\n            );\n\n            this.instance.set(attribute?.attributeName ?? attributeOrColumnName, updatedValue, {\n              raw: true,\n              comesFromDatabase: true,\n            });\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance || data, data[0].$action === 'INSERT'];\n      }\n\n      return [\n        this.instance || (data && ((this.options.plain && data[0]) || data)) || undefined,\n        rowCount,\n      ];\n    }\n\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replaceAll(\"'\", '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment,\n        };\n\n        if (result[_result.Name].type.includes('CHAR') && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      return this.options.returning ? this.handleSelectQuery(data) : rowCount;\n    }\n\n    if (this.isDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n\n    return data;\n  }\n\n  formatError(err) {\n    let match;\n\n    match = err.message.match(\n      /Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'\\. Cannot insert duplicate key in object '.*'\\.(:? The duplicate key value is \\((.*)\\).)?/s,\n    );\n    match ||= err.message.match(\n      /Cannot insert duplicate key row in object .* with unique index '(.*)'\\.(:? The duplicate key value is \\((.*)\\).)?/s,\n    );\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey =\n        this.model &&\n        this.model.getIndexes().find(index => index.unique && index.name === match[1]);\n\n      let message = 'Validation error';\n\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      forOwn(fields, (value, field) => {\n        errors.push(\n          new ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique',\n          ),\n        );\n      });\n\n      const uniqueConstraintError = new UniqueConstraintError({\n        message,\n        errors,\n        cause: err,\n        fields,\n      });\n      if (err.errors?.length > 0) {\n        return new AggregateError([...err.errors, uniqueConstraintError]);\n      }\n\n      return uniqueConstraintError;\n    }\n\n    match = err.message.match(\n      /The (?:DELETE|INSERT|MERGE|UPDATE) statement conflicted with the (?:FOREIGN KEY|REFERENCE) constraint \"(.*)\"\\. The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'\\./,\n    );\n    if (match && match.length > 1) {\n      const fkConstraintError = new ForeignKeyConstraintError({\n        index: match[1],\n        cause: err,\n        table: match[3],\n        fields: [match[4]],\n      });\n\n      if (err.errors?.length > 0) {\n        return new AggregateError([...err.errors, fkConstraintError]);\n      }\n\n      return fkConstraintError;\n    }\n\n    if (err.errors?.length > 0) {\n      let firstError;\n      for (const [index, error] of err.errors.entries()) {\n        match = error.message.match(\n          /Could not (?:create|drop) constraint(?: or index)?\\. See previous errors\\./,\n        );\n        if (match && match.length > 0) {\n          let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)]/i);\n          constraint = constraint ? constraint[1] : undefined;\n          let table = err.sql.match(/table \\[(.+?)]/i);\n          table = table ? table[1] : undefined;\n\n          firstError = new UnknownConstraintError({\n            message: err.errors[index - 1].message,\n            constraint,\n            table,\n            cause: err,\n          });\n        }\n      }\n\n      if (firstError) {\n        return new AggregateError([...err.errors, firstError]);\n      }\n\n      return new AggregateError(err.errors);\n    }\n\n    return new DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result ||= this.sql\n      .toLowerCase()\n      .startsWith(\n        \"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\",\n      );\n    result ||= this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result ||= this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    const indexes = data.reduce((acc, curr) => {\n      if (acc.has(curr.index_name)) {\n        const index = acc.get(curr.index_name);\n        if (curr.is_included_column) {\n          index.includes.push(curr.column_name);\n        } else {\n          index.fields.push({\n            attribute: curr.column_name,\n            length: undefined,\n            order: curr.is_descending_key ? 'DESC' : 'ASC',\n            collate: undefined,\n          });\n        }\n\n        return acc;\n      }\n\n      acc.set(curr.index_name, {\n        primary: curr.is_primary_key,\n        fields: curr.is_included_column\n          ? []\n          : [\n              {\n                attribute: curr.column_name,\n                length: undefined,\n                order: curr.is_descending_key ? 'DESC' : 'ASC',\n                collate: undefined,\n              },\n            ],\n        includes: curr.is_included_column ? [curr.column_name] : [],\n        name: curr.index_name,\n        tableName: undefined,\n        unique: curr.is_unique,\n        type: null,\n      });\n\n      return acc;\n    }, new Map());\n\n    return Array.from(indexes.values());\n  }\n}\n"],
  "mappings": "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",
  "names": ["TYPES", "rows", "rowCount", "forOwn", "zipObject"]
}
