"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_core = require("@sequelize/core");
var import_chai = require("chai");
var import_sinon = __toESM(require("sinon"));
var import_async_queue_error = require("../async-queue-error");
var import_async_queue = require("./async-queue");
const asyncFunction = async () => "test";
describe("AsyncQueue", () => {
  let queue;
  beforeEach(() => {
    queue = new import_async_queue.AsyncQueue();
  });
  it("should initialize correctly", () => {
    (0, import_chai.assert)(queue instanceof import_async_queue.AsyncQueue);
    (0, import_chai.expect)(queue.closed).to.be.false;
  });
  it("should close correctly", () => {
    queue.close();
    (0, import_chai.expect)(queue.closed).to.be.true;
  });
  it("should enqueue and execute function correctly", async () => {
    const mockAsyncFunction = import_sinon.default.stub().resolves("test");
    const result = await queue.enqueue(mockAsyncFunction);
    (0, import_chai.expect)(result).to.equal("test");
    (0, import_chai.expect)(mockAsyncFunction.calledOnce).to.be.true;
  });
  it("should reject if closed before execution", async () => {
    queue.close();
    try {
      await queue.enqueue(asyncFunction);
    } catch (error) {
      (0, import_chai.assert)(error instanceof import_core.ConnectionError);
      (0, import_chai.expect)(error.cause).to.be.instanceOf(
        import_async_queue_error.AsyncQueueError,
        "the connection was closed before this query could be executed"
      );
    }
  });
  it("should reject if closed during execution", async () => {
    const promise = queue.enqueue(asyncFunction);
    queue.close();
    try {
      await promise;
    } catch (error) {
      (0, import_chai.assert)(error instanceof import_core.ConnectionError);
      (0, import_chai.expect)(error.cause).to.be.instanceOf(
        import_async_queue_error.AsyncQueueError,
        "the connection was closed before this query could finish executing"
      );
    }
  });
});
//# sourceMappingURL=async-queue.test.js.map
