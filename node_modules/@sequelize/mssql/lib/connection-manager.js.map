{
  "version": 3,
  "sources": ["../src/connection-manager.ts"],
  "sourcesContent": ["import type { AbstractConnection, ConnectionOptions } from '@sequelize/core';\nimport {\n  AbstractConnectionManager,\n  AccessDeniedError,\n  ConnectionError,\n  ConnectionRefusedError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n} from '@sequelize/core';\nimport { isErrorWithStringCode } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/check.js';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport { removeUndefined } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport { isError, splitObject } from '@sequelize/utils';\nimport * as Tedious from 'tedious';\nimport { AsyncQueue } from './_internal/async-queue.js';\nimport type { InlinedTediousOptions } from './_internal/connection-options.js';\nimport { INLINED_OPTION_NAMES } from './_internal/connection-options.js';\nimport { ASYNC_QUEUE } from './_internal/symbols.js';\nimport type { MsSqlDialect } from './dialect.js';\n\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nexport interface MsSqlConnection extends AbstractConnection, Tedious.Connection {\n  // custom properties we attach to the connection\n  [ASYNC_QUEUE]: AsyncQueue;\n}\n\nexport type MsSqlConnectionOptions = Partial<Omit<Tedious.ConnectionConfiguration, 'options'>> &\n  // We inline \"options\" with the other options, so we can allowlist them.\n  InlinedTediousOptions;\n\nexport type TediousModule = typeof Tedious;\n\nexport class MsSqlConnectionManager extends AbstractConnectionManager<\n  MsSqlDialect,\n  MsSqlConnection\n> {\n  readonly #lib: TediousModule;\n\n  constructor(dialect: MsSqlDialect) {\n    super(dialect);\n    this.#lib = dialect.options.tediousModule ?? Tedious;\n  }\n\n  async connect(connectionOptions: ConnectionOptions<MsSqlDialect>): Promise<MsSqlConnection> {\n    const [inlinedOptions, regularOptions] = splitObject(connectionOptions, INLINED_OPTION_NAMES);\n\n    const tediousConfig: Partial<Tedious.ConnectionConfiguration> = {\n      ...regularOptions,\n      options: removeUndefined(inlinedOptions),\n    };\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection: MsSqlConnection = new this.#lib.Connection(\n          tediousConfig as Tedious.ConnectionConfiguration,\n        ) as MsSqlConnection;\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n\n        connection[ASYNC_QUEUE] = new AsyncQueue();\n\n        const connectHandler = (error: unknown) => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n\n          if (error) {\n            return void reject(error);\n          }\n\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = (error: unknown) => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n        connection.on('error', (error: unknown) => {\n          if (\n            isErrorWithStringCode(error) &&\n            (error.code === 'ESOCKET' || error.code === 'ECONNRESET')\n          ) {\n            void this.sequelize.pool.destroy(connection);\n          }\n        });\n\n        if (tediousConfig.options?.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error: unknown) {\n      isError.assert(error);\n\n      if (!isErrorWithStringCode(error)) {\n        throw new ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new HostNotReachableError(error);\n          }\n\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new HostNotFoundError(error);\n          }\n\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new ConnectionRefusedError(error);\n          }\n\n          throw new ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new AccessDeniedError(error);\n        case 'EINVAL':\n          throw new InvalidConnectionError(error);\n        default:\n          throw new ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection: MsSqlConnection): Promise<void> {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection[ASYNC_QUEUE].close();\n\n    await new Promise<void>(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection: MsSqlConnection) {\n    return connection?.state.name === 'LoggedIn';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
