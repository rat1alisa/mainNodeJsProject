{
  "version": 3,
  "sources": ["../src/dialect.ts"],
  "sourcesContent": ["import type { Sequelize } from '@sequelize/core';\nimport { AbstractDialect } from '@sequelize/core';\nimport { parseCommonConnectionUrlOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js';\nimport { createNamedParamBindCollector } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport { getSynchronizedTypeKeys } from '@sequelize/utils';\nimport {\n  BOOLEAN_CONNECTION_OPTION_NAMES,\n  CONNECTION_OPTION_NAMES,\n  NUMBER_CONNECTION_OPTION_NAMES,\n  STRING_CONNECTION_OPTION_NAMES,\n} from './_internal/connection-options.js';\nimport { registerMsSqlDbDataTypeParsers } from './_internal/data-types-db.js';\nimport * as DataTypes from './_internal/data-types-overrides.js';\nimport type { MsSqlConnectionOptions, TediousModule } from './connection-manager.js';\nimport { MsSqlConnectionManager } from './connection-manager.js';\nimport { MsSqlQueryGenerator } from './query-generator.js';\nimport { MsSqlQueryInterface } from './query-interface.js';\nimport { MsSqlQuery } from './query.js';\n\nexport { TDS_VERSION, ISOLATION_LEVEL as TEDIOUS_ISOLATION_LEVEL } from 'tedious';\n\nexport interface MsSqlDialectOptions {\n  /**\n   * The tedious library to use.\n   * If not provided, the tedious npm library will be used.\n   * Must be compatible with the tedious npm library API.\n   *\n   * Using this option should only be considered as a last resort,\n   * as the Sequelize team cannot guarantee its compatibility.\n   */\n  tediousModule?: TediousModule;\n}\n\nconst DIALECT_OPTION_NAMES = getSynchronizedTypeKeys<MsSqlDialectOptions>({\n  tediousModule: undefined,\n});\n\nexport class MsSqlDialect extends AbstractDialect<MsSqlDialectOptions, MsSqlConnectionOptions> {\n  static supports = AbstractDialect.extendSupport({\n    'DEFAULT VALUES': true,\n    'LIMIT ON UPDATE': true,\n    migrations: false,\n    returnValues: 'output',\n    schemas: true,\n    multiDatabases: true,\n    autoIncrement: {\n      identityInsert: true,\n      defaultValue: false,\n      update: false,\n    },\n    alterColumn: {\n      unique: false,\n    },\n    constraints: {\n      restrict: false,\n      default: true,\n      removeOptions: { ifExists: true },\n    },\n    index: {\n      collate: false,\n      type: true,\n      using: false,\n      where: true,\n      include: true,\n    },\n    tmpTableTrigger: true,\n    dataTypes: {\n      JSON: true,\n      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geography/spatial-types-geography?view=sql-server-ver16\n      GEOGRAPHY: false,\n      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geometry/spatial-types-geometry-transact-sql?view=sql-server-ver16\n      GEOMETRY: false,\n    },\n    uuidV4Generation: true,\n    jsonOperations: true,\n    jsonExtraction: {\n      unquoted: true,\n      quoted: false,\n    },\n    tableHints: true,\n    removeColumn: {\n      ifExists: true,\n    },\n    renameTable: {\n      changeSchemaAndTable: false,\n    },\n    createSchema: {\n      authorization: true,\n    },\n    connectionTransactionMethods: true,\n    settingIsolationLevelDuringTransaction: false,\n    startTransaction: {\n      useBegin: true,\n    },\n    delete: {\n      limit: false,\n    },\n  });\n\n  readonly connectionManager: MsSqlConnectionManager;\n  readonly queryGenerator: MsSqlQueryGenerator;\n  readonly queryInterface: MsSqlQueryInterface;\n  readonly Query = MsSqlQuery;\n\n  constructor(sequelize: Sequelize, options: MsSqlDialectOptions) {\n    super({\n      name: 'mssql',\n      sequelize,\n      dataTypeOverrides: DataTypes,\n      identifierDelimiter: {\n        start: '[',\n        end: ']',\n      },\n      options,\n      dataTypesDocumentationUrl:\n        'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx',\n      // SQL Server 2017 Express (version 14), minimum supported version, all the way\n      // up to the most recent version. When increasing this version, remember to\n      // update also the minimum version in the documentation at\n      //   https://github.com/sequelize/website/blob/main/docs/other-topics/dialect-specific-things.md\n      // and set the relevant years for the mssql Docker images in the ci.yml file at\n      //   .github/workflows/ci.yml\n      minimumDatabaseVersion: '14.0.1000',\n    });\n\n    this.connectionManager = new MsSqlConnectionManager(this);\n    this.queryGenerator = new MsSqlQueryGenerator(this);\n    this.queryInterface = new MsSqlQueryInterface(this);\n\n    registerMsSqlDbDataTypeParsers(this);\n  }\n\n  createBindCollector() {\n    return createNamedParamBindCollector('@');\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    const hex = buffer.toString('hex');\n\n    return `0x${hex}`;\n  }\n\n  escapeString(value: string): string {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    value = value.replaceAll(\"'\", \"''\");\n\n    return `N'${value}'`;\n  }\n\n  getDefaultSchema(): string {\n    return 'dbo';\n  }\n\n  parseConnectionUrl(url: string): MsSqlConnectionOptions {\n    const urlObject = new URL(url);\n\n    const options: MsSqlConnectionOptions = parseCommonConnectionUrlOptions({\n      allowedProtocols: ['sqlserver'],\n      url: urlObject,\n      hostname: 'server',\n      port: 'port',\n      pathname: 'database',\n      stringSearchParams: STRING_CONNECTION_OPTION_NAMES,\n      booleanSearchParams: BOOLEAN_CONNECTION_OPTION_NAMES,\n      numberSearchParams: NUMBER_CONNECTION_OPTION_NAMES,\n    });\n\n    if (urlObject.username || urlObject.password) {\n      options.authentication = {\n        type: 'default',\n        options: {},\n      };\n\n      if (urlObject.username) {\n        options.authentication.options.userName = decodeURIComponent(urlObject.username);\n      }\n\n      if (urlObject.password) {\n        options.authentication.options.password = decodeURIComponent(urlObject.password);\n      }\n    }\n\n    return options;\n  }\n\n  static getSupportedOptions() {\n    return DIALECT_OPTION_NAMES;\n  }\n\n  static getSupportedConnectionOptions() {\n    return CONNECTION_OPTION_NAMES;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_connection_options"]
}
